use std::collections::HashMap;

fn collatz_length(num: u32, cache: &mut HashMap<u32, u32>) -> &u32 {
    if cache.contains_key(&num) {
        cache.get(&num).unwrap()
    } else {
        cache.insert(
            num,
            1 + match num % 2 {
                1 => collatz_length(num * 3 + 1, cache),
                _ => collatz_length(num / 2, cache),
            },
        );
        cache.get(&num).unwrap()
    }
}

fn main() {
    let mut max = &0;
    let mut cache = HashMap::from([(1u32, 1u32)]);
    for n in 1..100 {
        let c = collatz_length(n, &mut cache);
        if c > max {
            max = c
        }

        // println!("{} => {}", &n, &c);
    }

    println!("{:?}", cache);
    println!("Maximum: {}", max);
}
